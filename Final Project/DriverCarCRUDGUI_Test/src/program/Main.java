/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;

import com.toedter.calendar.JTextFieldDateEditor;
import entity.*;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.text.ParseException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.LocalDate;
import java.time.Period;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import static org.flywaydb.core.internal.util.StringUtils.isNumeric;

/**
 *
 * @author Jefferson
 */

public class Main extends javax.swing.JFrame {
    private static DAO driverDAO; // DAO of Driver
    private static DAO carDAO; // DAO of Car
    /**
     * Creates new form Main
     */
    
    String filename = null;
    int s = 0;
    byte[] driverImage = null;
    
    public Main() throws ParseException {
        super ("FD Racers Application"); // Renames the application name
        initComponents();
        refreshDriversTable();              // Updates Driver table with current information in the database
        refreshCarsTable();                // Updates Car table with current information in teh database

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        carFrame = new javax.swing.JFrame();
        updateCar = new javax.swing.JButton();
        carModelYearLabel = new javax.swing.JLabel();
        carIDLabel = new javax.swing.JLabel();
        driverIDCLabel = new javax.swing.JLabel();
        addCar = new javax.swing.JButton();
        carMakeLabel = new javax.swing.JLabel();
        carModelLabel = new javax.swing.JLabel();
        carColorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        textDriverID = new javax.swing.JTextField();
        textModelYear = new javax.swing.JTextField();
        textColor = new javax.swing.JTextField();
        textModel = new javax.swing.JTextField();
        textMake = new javax.swing.JTextField();
        textCarID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        carTable = new javax.swing.JTable();
        clearCar = new javax.swing.JButton();
        removeCar = new javax.swing.JButton();
        infoCardFrame = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        country = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        cardPoints = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        image = new javax.swing.JLabel();
        cardName = new javax.swing.JLabel();
        cardTeam = new javax.swing.JLabel();
        cardRank = new javax.swing.JLabel();
        cardHeader = new javax.swing.JLabel();
        cardDOB = new javax.swing.JLabel();
        cardAge = new javax.swing.JLabel();
        driverIDLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        header = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        rankLabel = new javax.swing.JLabel();
        pointsLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        textID = new javax.swing.JTextField();
        textFirstName = new javax.swing.JTextField();
        textLastName = new javax.swing.JTextField();
        dobChooser = new com.toedter.calendar.JDateChooser();
        textRank = new javax.swing.JTextField();
        textPoints = new javax.swing.JTextField();
        comboCountry = new javax.swing.JComboBox<>();
        textTeam = new javax.swing.JTextField();
        removeDriver = new javax.swing.JButton();
        updateDriver = new javax.swing.JButton();
        carButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        driverTable = new javax.swing.JTable();
        message = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        addDriver = new javax.swing.JButton();
        teamLabel = new javax.swing.JLabel();
        imageButton = new javax.swing.JButton();
        tableHeader = new javax.swing.JLabel();
        clearDriver = new javax.swing.JButton();
        driverButton = new javax.swing.JRadioButton();
        infoCardButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        exitDriverButton = new javax.swing.JButton();

        carFrame.setTitle("Car Database");
        carFrame.setSize(new java.awt.Dimension(830, 330));
        carFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateCar.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        updateCar.setForeground(new java.awt.Color(0, 0, 0));
        updateCar.setText("Update");
        updateCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCarActionPerformed(evt);
            }
        });
        carFrame.getContentPane().add(updateCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, 90, 30));

        carModelYearLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        carModelYearLabel.setForeground(new java.awt.Color(255, 0, 51));
        carModelYearLabel.setText("Car Year");
        carFrame.getContentPane().add(carModelYearLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 30));

        carIDLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        carIDLabel.setForeground(new java.awt.Color(255, 0, 51));
        carIDLabel.setText("Car ID");
        carFrame.getContentPane().add(carIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        driverIDCLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        driverIDCLabel.setForeground(new java.awt.Color(255, 0, 51));
        driverIDCLabel.setText("Driver ID");
        carFrame.getContentPane().add(driverIDCLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        addCar.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        addCar.setForeground(new java.awt.Color(0, 0, 0));
        addCar.setText("Add");
        addCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCarActionPerformed(evt);
            }
        });
        carFrame.getContentPane().add(addCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 70, 30));

        carMakeLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        carMakeLabel.setForeground(new java.awt.Color(255, 0, 51));
        carMakeLabel.setText("Make");
        carFrame.getContentPane().add(carMakeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        carModelLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        carModelLabel.setForeground(new java.awt.Color(255, 0, 51));
        carModelLabel.setText("Model");
        carFrame.getContentPane().add(carModelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        carColorLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        carColorLabel.setForeground(new java.awt.Color(255, 0, 51));
        carColorLabel.setText("Color");
        carFrame.getContentPane().add(carColorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textDriverID.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textDriverID.setDocument(new JTextFieldLimiter(3));
        jPanel2.add(textDriverID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 230, 30));

        textModelYear.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textModelYear.setDocument(new JTextFieldLimiter(4));
        jPanel2.add(textModelYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 230, 30));

        textColor.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textColor.setDocument(new JTextFieldLimiter(10));
        jPanel2.add(textColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 230, 30));

        textModel.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textModel.setDocument(new JTextFieldLimiter(20));
        jPanel2.add(textModel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 230, 30));

        textMake.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textMake.setDocument(new JTextFieldLimiter(15));
        jPanel2.add(textMake, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 230, 30));

        textCarID.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textCarID.setDocument(new JTextFieldLimiter(3));
        jPanel2.add(textCarID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 230, 30));

        carTable.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        carTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Make", "Model", "Color", "Model Year", "Driver ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        carTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(carTable);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 430, 270));

        clearCar.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        clearCar.setForeground(new java.awt.Color(0, 0, 0));
        clearCar.setText("Clear");
        clearCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCarActionPerformed(evt);
            }
        });
        jPanel2.add(clearCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, -1, 30));

        removeCar.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        removeCar.setForeground(new java.awt.Color(0, 0, 0));
        removeCar.setText("Remove");
        removeCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCarActionPerformed(evt);
            }
        });
        jPanel2.add(removeCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, -1, 30));

        carFrame.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 300));

        infoCardFrame.setTitle("FD Info Card");
        infoCardFrame.setSize(new java.awt.Dimension(500, 320));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setForeground(new java.awt.Color(0, 0, 0));

        country.setText("Country");

        exitButton.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        cardPoints.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardPoints.setForeground(new java.awt.Color(255, 255, 255));
        cardPoints.setText("Points");

        jDesktopPane1.setBackground(new java.awt.Color(0, 0, 0));
        jDesktopPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0)));
        jDesktopPane1.setForeground(new java.awt.Color(0, 0, 0));

        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jDesktopPane1.add(image);
        image.setBounds(0, 0, 150, 110);
        // Set image to jlabel
        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pika.png")));

        cardName.setBackground(new java.awt.Color(255, 255, 255));
        cardName.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardName.setForeground(new java.awt.Color(255, 255, 255));
        cardName.setText("Name");

        cardTeam.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardTeam.setForeground(new java.awt.Color(255, 255, 255));
        cardTeam.setText("Team");

        cardRank.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardRank.setForeground(new java.awt.Color(255, 255, 255));
        cardRank.setText("Rank");

        cardHeader.setBackground(new java.awt.Color(255, 0, 51));
        cardHeader.setFont(new java.awt.Font("Oceanic Drift", 0, 36)); // NOI18N
        cardHeader.setForeground(new java.awt.Color(255, 0, 51));
        cardHeader.setText("FD Racer Card");

        cardDOB.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardDOB.setForeground(new java.awt.Color(255, 255, 255));
        cardDOB.setText("Date of Birth");

        cardAge.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        cardAge.setForeground(new java.awt.Color(255, 255, 255));
        cardAge.setText("Age");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(cardHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDesktopPane1)
                            .addComponent(country, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(221, 221, 221)
                                .addComponent(exitButton))
                            .addComponent(cardName, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cardTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cardDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cardAge, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cardRank, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(cardPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cardHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cardName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cardTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cardDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cardAge, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cardRank, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cardPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 43, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        infoCardFrame.getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        driverIDLabel.setBackground(new java.awt.Color(255, 0, 51));
        driverIDLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        driverIDLabel.setForeground(new java.awt.Color(255, 0, 51));
        driverIDLabel.setText("Driver ID");
        getContentPane().add(driverIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, 30));

        firstNameLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        firstNameLabel.setForeground(new java.awt.Color(255, 0, 51));
        firstNameLabel.setText("First Name");
        getContentPane().add(firstNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, 30));

        lastNameLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(255, 0, 51));
        lastNameLabel.setText("Last Name");
        getContentPane().add(lastNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, 30));

        header.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        header.setForeground(new java.awt.Color(255, 0, 51));
        header.setText("Application Running....");
        getContentPane().add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        dobLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        dobLabel.setForeground(new java.awt.Color(255, 0, 51));
        dobLabel.setText("Date of Birth");
        getContentPane().add(dobLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, 30));

        countryLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        countryLabel.setForeground(new java.awt.Color(255, 0, 51));
        countryLabel.setText("Country");
        getContentPane().add(countryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, 30));

        rankLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        rankLabel.setForeground(new java.awt.Color(255, 0, 51));
        rankLabel.setText("Driver Rank");
        getContentPane().add(rankLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, 30));

        pointsLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        pointsLabel.setForeground(new java.awt.Color(255, 0, 51));
        pointsLabel.setText("Drift Points");
        getContentPane().add(pointsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, 30));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 0, 51));

        textID.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textID.setDocument(new JTextFieldLimiter(3));
        textID.setMaximumSize(new java.awt.Dimension(999, 999));

        textFirstName.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textFirstName.setDocument(new JTextFieldLimiter(20));

        textLastName.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textLastName.setDocument(new JTextFieldLimiter(20));

        JTextFieldDateEditor editor = (JTextFieldDateEditor) dobChooser.getDateEditor();
        editor.setEditable(false);
        dobChooser.setDateFormatString("yyyy-MM-dd");

        textRank.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textRank.setDocument(new JTextFieldLimiter(3));

        textPoints.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textPoints.setDocument(new JTextFieldLimiter(3));

        comboCountry.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        comboCountry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua", "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Boliva", "Bosnia", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cote d'Ivoire", "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Rep", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czechia", "Democratic Rep of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Holy See", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Lexembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North Korea", "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Palestine State", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "St Kitts and Nevis", "St Lucia", "St Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Sweden", "Switerland", "Syria", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"}));

        textTeam.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        textTeam.setDocument(new JTextFieldLimiter(25));

        removeDriver.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        removeDriver.setText("Remove");
        removeDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDriverActionPerformed(evt);
            }
        });

        updateDriver.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        updateDriver.setText("Update");
        updateDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDriverActionPerformed(evt);
            }
        });

        buttonGroup1.add(carButton);
        carButton.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        carButton.setForeground(new java.awt.Color(255, 0, 51));
        carButton.setText("Car Table Access");
        carButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                carButtonItemStateChanged(evt);
            }
        });

        driverTable.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        driverTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Driver ID", "First Name", "Last Name", "Date of Birth", "Age", "Driver Rank", "Drift Points", "Country", "Team", "Image"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        driverTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                driverTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(driverTable);

        message.setBackground(new java.awt.Color(255, 255, 255));
        message.setFont(new java.awt.Font("Oceanic Drift", 0, 16)); // NOI18N
        message.setForeground(new java.awt.Color(255, 255, 255));

        status.setBackground(new java.awt.Color(255, 255, 255));
        status.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        status.setForeground(new java.awt.Color(255, 255, 255));
        status.setText("Status:");

        addDriver.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        addDriver.setText("Add");
        addDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDriverActionPerformed(evt);
            }
        });

        teamLabel.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        teamLabel.setForeground(new java.awt.Color(255, 0, 51));
        teamLabel.setText("Team");

        imageButton.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        imageButton.setText("INSERT IMAGE");
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        tableHeader.setBackground(new java.awt.Color(255, 0, 51));
        tableHeader.setFont(new java.awt.Font("Oceanic Drift", 0, 36)); // NOI18N
        tableHeader.setForeground(new java.awt.Color(255, 0, 51));
        tableHeader.setText("FD Racers Data");

        clearDriver.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        clearDriver.setText("Clear");
        clearDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDriverActionPerformed(evt);
            }
        });

        buttonGroup1.add(driverButton);
        driverButton.setFont(new java.awt.Font("Oceanic Drift", 0, 18)); // NOI18N
        driverButton.setForeground(new java.awt.Color(255, 0, 51));
        driverButton.setText("Driver Table Access");
        driverButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                driverButtonItemStateChanged(evt);
            }
        });

        infoCardButton.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        infoCardButton.setText("Info Card");
        infoCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoCardButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Oceanic Drift", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Image");

        exitDriverButton.setFont(new java.awt.Font("Oceanic Drift", 0, 20)); // NOI18N
        exitDriverButton.setText("Exit");
        exitDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitDriverButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(driverButton)
                        .addGap(26, 26, 26)
                        .addComponent(carButton))
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(addDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(updateDriver)
                                    .addGap(7, 7, 7)
                                    .addComponent(removeDriver)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(teamLabel)
                                        .addComponent(jLabel1))
                                    .addGap(109, 109, 109)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(imageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                            .addComponent(textTeam))
                                        .addComponent(textPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textRank, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dobChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(tableHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(infoCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitDriverButton)
                        .addGap(22, 22, 22)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 959, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tableHeader)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(carButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(driverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(textFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(dobChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(textRank, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(textPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imageButton)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(clearDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removeDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(infoCardButton)
                            .addComponent(exitDriverButton))))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1420, 690));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDriverActionPerformed
        if (!textID.getText().isEmpty() & !textFirstName.getText().isEmpty() & !textLastName.getText().isEmpty() & dobChooser.getDate() != null & !textRank.getText().isEmpty() & !textPoints.getText().isEmpty() & !textTeam.getText().isEmpty()) { try {
            // Checks if the fields are empty, if empty, can enter information
            if (isNumeric(textID.getText()) == true && isNumeric(textRank.getText()) == true && isNumeric(textPoints.getText())== true) { // Checks the jtextfields that require only nubmers are numbers
                int driverID = Integer.parseInt(textID.getText().trim()); // Gets the user input for the driver ID
                String firstName = textFirstName.getText().trim(); // Gets the user input for the first name
                String lastName = textLastName.getText().trim(); // Gets the user input for the last name
                SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd"); // Sets the format for correct date
                String dob = dFormat.format(dobChooser.getDate()); // Gets the date from jdatechooser and is converted to the date format as string
                Date newdate = dFormat.parse(dob); // Analyze dob for the date format I created from 2 lines up
                Calendar cal = Calendar.getInstance(); // Creates new instance of calender
                cal.setTime(newdate); // Sets the date of the calender as the Date dob while in the correct format
                int year = cal.get(Calendar.YEAR); // Gets the year of the dob
                int month = cal.get(Calendar.MONTH); // Gets the month of the dob
                int day = cal.get(Calendar.DATE); // Gets the day of the dob
                LocalDate birthday = LocalDate.of(year, month, day); // Creates new instance of LocalDate as the driver's dob entering in the year, month, date from above
                LocalDate now = LocalDate.now(); // Creates new instance of LocalDate for today's date
                Period diff = Period.between(birthday, now); // Calculates the difference in years 
                int age = diff.getYears(); // Gets years for the age 
                int driverRank = Integer.parseInt(textRank.getText().trim()); // Gets the user input for rank
                int driftPoints = Integer.parseInt(textPoints.getText().trim()); // Gets the user input for points
                String country = comboCountry.getSelectedItem().toString(); // Gets the selected country 
                String team = textTeam.getText().trim(); // Gets the uers input for the team
                byte[] image = driverImage; // Gets user input for image
                Driver driver = getDriver(driverID); // Creates Driver object to use getDriver method to get the driver ID
                if(driver.getDriverID() != -1) { // Checks if the driver id already exist
                    alert("Driver already exist under that ID", "Primary Key violation"); // If yes, gives alert message of a primary key violation
                }
                else
                {
                    addDriver(driverID, firstName, lastName, dob, age, driverRank, driftPoints, country, team, image); // If no errors, adds the driver into the database
                    try {
                        refreshDriversTable(); // Updates the driver table with the new driver
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    clearDriverTextFields(); // Resets and clears the text entry fields 
                    message.setText("A new driver was inserted successfully!"); // Message updater
                }
            }
            else 
            {
                alert("Invalid input(s), Try again.", "Insert error");
            }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{ // If textID field is still empty, alert message is given
            alert("All fields must be populated", "Insert error"); // The insert error message
        }     
    }
            
        // method to show an info alert
        public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
        // method to show an error alert
        public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_addDriverActionPerformed

    private void updateDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDriverActionPerformed
        if (!textID.getText().isEmpty() & !textFirstName.getText().isEmpty() & !textLastName.getText().isEmpty() & dobChooser.getDate() != null & !textRank.getText().isEmpty() & !textPoints.getText().isEmpty() & !textTeam.getText().isEmpty()) { try {
            // Checks if the textID field is empty, if empty, can enter information
            if (isNumeric(textID.getText()) == true && isNumeric(textRank.getText()) == true && isNumeric(textPoints.getText())== true) {
                int driverID = Integer.parseInt(textID.getText().trim()); // Gets the user input for the driver ID
                String firstName = textFirstName.getText().trim(); // Gets the user input for the first name
                String lastName = textLastName.getText().trim(); // Gets the user input for the last name
                SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
                String dob = dFormat.format(dobChooser.getDate());
                Date newdate = dFormat.parse(dob);
                Calendar cal = Calendar.getInstance();
                cal.setTime(newdate);
                int year = cal.get(Calendar.YEAR);
                int month = cal.get(Calendar.MONTH);
                int day = cal.get(Calendar.DATE);
                LocalDate birthday = LocalDate.of(year, month, day);
                LocalDate now = LocalDate.now();
                Period diff = Period.between(birthday, now);
                int age = diff.getYears();
                int driverRank = Integer.parseInt(textRank.getText().trim());
                int driftPoints = Integer.parseInt(textPoints.getText().trim());
                String country = comboCountry.getSelectedItem().toString();
                String team = textTeam.getText().trim();
                byte[] image = driverImage;
                Driver driver = getDriver(driverID); // Creates Driver object to use getDriver method to get the driver ID
                if(driver.getDriverID() != -1) { // Checks if the driver id already exist
                    updateDriver(driverID, firstName, lastName, dob, age, driverRank, driftPoints, country, team, image); // Update driver method is ran and updates the driver information
                    try {
                        refreshDriversTable(); // Updates the driver table with new information
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    clearDriverTextFields(); // Resets and clears the text entry fields
                    message.setText("An existing driver was updated successfully!"); // Message updater
                }
                else
                {   // If driver does not exist already, cannot be updated and gives alert message
                    alert("Driver does not exist", "Update error"); // The update error message
                }
            }
            else 
            {
                alert("Invalid input(s), Update could not be made.", "Update error");
            }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {   // If textID field is still empty, alert message is given
            alert("DriverID cannot be empty", "Update error"); // The update error message
        }
    }//GEN-LAST:event_updateDriverActionPerformed

    private void removeDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDriverActionPerformed
        alert("Driver cannnot be deleted unless driver's cars are deleted first");
        if (!textID.getText().isEmpty()) { // Checks if the textID field is empty, if empty, can enter information
            if (isNumeric(textID.getText()) == true && isNumeric(textRank.getText()) == true && isNumeric(textPoints.getText())== true) {
                int driverID = Integer.parseInt(textID.getText().trim()); // Gets the user input for the driver ID
                if(carCheck(driverID)) {
                    Driver driver = getDriver(driverID); // Creates Driver object to use getDriver method to get the driver ID
                    if(driver.getDriverID() != -1) { // Checks if the driver id already exist
                        int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION); // Option pane to confirm deletion
                        if(option == 0) { // If option is yes 
                            deleteDriver(driverID); // Deletes the driver from database
                            try {
                                refreshDriversTable(); // Updates the driver table with the new driver table information 
                            } catch (ParseException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            clearDriverTextFields(); // Resets and clears the text entry fields
                            message.setText("A driver was deleted successfully!"); // Message updater
                        }
                    }
                    else
                    {   // If driver does not exist already, cannot be deleted and gives alert message
                        alert("Driver does not exist", "Delete error"); // The delete error message
                    }
                    }
                else {
                        alert("Driver cannnot be deleted unless driver's cars are deleted first", "Delete error");
                     }
            }
            else 
            {
                alert("Invalid input(s), Could not delete driver", "Delete error");
            }
        }
        else
        {   // If textID field is still empty, alert message is given
            alert("DriverID cannot be empty", "Delete error"); // The delete error message
        }
    }//GEN-LAST:event_removeDriverActionPerformed

    private void driverTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_driverTableMouseClicked
        int i = driverTable.getSelectedRow(); // Gets the selected row and saves it as int i
        TableModel model = driverTable.getModel(); // Creates tablemodel object to use getModel method for driverTable
        textID.setText(model.getValueAt(i, 0).toString()); // Enters selected driver ID into textID text field
        textFirstName.setText(model.getValueAt(i, 1).toString()); // Enters selected driver first name into textFirstName text field
        textLastName.setText(model.getValueAt(i, 2).toString()); // Enters selected driver last name into textLastName text field
        try {
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(i, 3));
            dobChooser.setDate(date);
        } catch (ParseException ex) {
            return;
        }
        textRank.setText(model.getValueAt(i, 5).toString());
        textPoints.setText(model.getValueAt(i, 6).toString());
        comboCountry.setSelectedItem(model.getValueAt(i, 7).toString());
        textTeam.setText(model.getValueAt(i, 8).toString());
        
        cardName.setText("Name: " + model.getValueAt(i, 1).toString() + " " + model.getValueAt(i, 2).toString());
        cardTeam.setText("Team: " + model.getValueAt(i, 8).toString());
        cardRank.setText("Rank: " + model.getValueAt(i, 5).toString());
        cardPoints.setText("Points: " + model.getValueAt(i, 6).toString());
        cardDOB.setText("Date of Birth: " + model.getValueAt(i, 3).toString());
        cardAge.setText("Age: " + model.getValueAt(i, 4).toString());
        ImageIcon imgIcon = new ImageIcon(new ImageIcon((byte[])model.getValueAt(i, 9)).getImage().getScaledInstance(image.getWidth(), image.getHeight(), Image.SCALE_SMOOTH));
        image.setIcon(imgIcon);
        try {
            String flag = model.getValueAt(i, 7).toString();
            System.out.println(flag);
            country.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/"+ flag+ ".gif")));
        } catch (Exception e) {
            return;
        }
        
        
    }//GEN-LAST:event_driverTableMouseClicked

    private void driverButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_driverButtonItemStateChanged
        header.setText("Driver Database Being Accessed..."); // Set header text
        carFrame.setVisible(false);
    }//GEN-LAST:event_driverButtonItemStateChanged

    private void carButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_carButtonItemStateChanged
        header.setText("Car Database Being Accessed..."); // Set header text
        carFrame.setVisible(true);
        

    }//GEN-LAST:event_carButtonItemStateChanged

    
    private void carTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carTableMouseClicked
        int i = carTable.getSelectedRow(); // Gets the selected row and saves it as int i
        TableModel model = carTable.getModel(); // Creates tablemodel object to use getModel method for carTable
        textCarID.setText(model.getValueAt(i, 0).toString()); // Enters selected car CarID into textCarID text field
        textMake.setText(model.getValueAt(i, 1).toString()); // Enters selected car title into textTitle text field
        textModel.setText(model.getValueAt(i, 2).toString());
        textColor.setText(model.getValueAt(i, 3).toString());
        textModelYear.setText(model.getValueAt(i, 4).toString());
        textDriverID.setText(model.getValueAt(i, 5).toString()); // Enters selected car driverID into textDriverID text field
    }//GEN-LAST:event_carTableMouseClicked

    private void addCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCarActionPerformed
        if (!textDriverID.getText().isEmpty() & !textMake.getText().isEmpty() & !textModel.getText().isEmpty() & !textColor.getText().isEmpty() & !textModelYear.getText().isEmpty()) { // If driverID field is left empty...
            if (isNumeric(textCarID.getText()) == true && isNumeric(textModelYear.getText()) == true && isNumeric(textDriverID.getText())== true) {
                if (!textCarID.getText().isEmpty()) { // Checks if the textCarID field is empty, if empty, can enter information
                    int carID = Integer.parseInt(textCarID.getText().trim()); // Gets the user input for the car CarID
                    String make = textMake.getText().trim(); // Gets the user input for the title
                    String model = textModel.getText().trim();
                    String color = textColor.getText().trim();
                    int modelYear = Integer.parseInt(textModelYear.getText().trim());
                    int driverID = Integer.parseInt(textDriverID.getText().trim()); // Gets the user input for the driver ID
                    Car car = getCar(carID); // Creates Car object to use getCar method to get the CarID
                    Driver driver = getDriver(driverID); // Creates Driver object to use getDriver method to get the driver ID
                    if(car.getCarID() != -1) {  // Checks if the car carID already exist
                        alert("Car already exist under that CarID", "Priamry Key Violation"); // If yes, gives alert message of a primary key violation
                    }
                    else if (driver.getDriverID() == -1) { // Checks if the driver id already exist
                        alert("Driver does not exist for this car", "Foreign Key Violation"); // If no, gives alert message of a foreign key violation
                    }
                    else { // If it does not already exist...
                        addCar(carID, make, model, color, modelYear, driverID); // Adds car to into the database
                        refreshCarsTable(); // Updates the car table with new car table information
                        clearCarTextFields(); // Resets and clears the text entry fields
                        message.setText("A new car was inserted successfully!"); // Message updater
                    }
                }
                else
                {   // If textCarID field is still empty, alert message is given
                alert("CarID cannot be empty", "Insert error"); // Insert error message
                }
            }
            else {
                alert("Invalid input(s), Could not add car", "Insert error");
            }
        }
        else{
            alert("DriverID and other fields cannot be empty", "Insert error"); // alert message is given
        }
    }//GEN-LAST:event_addCarActionPerformed

    private void removeCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCarActionPerformed
        if (textDriverID.getText().isEmpty()) { // If driverID field is left empty...
            alert("DriverID cannot be empty", "Delete error"); // alert message is given
        }
        else{
            if (!textCarID.getText().isEmpty()) { // Checks if the textCarID field is empty, if empty, can enter information
                int carID = Integer.parseInt(textCarID.getText().trim()); // Gets the user input for the car CarID
                Car car = getCar(carID); // Creates Car object to use getCar method to get the CarID
                if(car.getCarID() != -1) { // Checks if the car carID already exist
                    int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION); // Option pane to confirm deletion
                    if(option == 0) { // If option is yes
                        deleteCar(carID); // Deletes car from database
                        refreshCarsTable(); // Updates the car table with new car table information
                        clearCarTextFields(); // Resets and clears the text entry fields
                        message.setText("A car was deleted successfully!"); // Message updater
                    }
                }
                else
                {   // If car does not exist already, cannot be deleted and gives alert message
                    alert("Car does not exist", "Delete error"); // Delete error message
                }
            }
            else
            {   // If textCarID field is still empty, alert message is given
                alert("Car ID cannot be empty", "Delete error"); // Delete error message
            }
        }
    }//GEN-LAST:event_removeCarActionPerformed

    private void updateCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCarActionPerformed
        if (!textDriverID.getText().isEmpty() & !textMake.getText().isEmpty() & !textModel.getText().isEmpty() & !textColor.getText().isEmpty() & !textModelYear.getText().isEmpty()) { // If driverID field is left empty...
            if (isNumeric(textCarID.getText()) == true && isNumeric(textModelYear.getText()) == true && isNumeric(textDriverID.getText())== true) {
                if (!textCarID.getText().isEmpty()) { // // Checks if the textCarID field is empty, if empty, can enter information
                    int carID = Integer.parseInt(textCarID.getText().trim()); // Gets the user input for the car CarID
                    String make = textMake.getText().trim(); // Gets the user input for the title
                    String model = textModel.getText().trim();
                    String color = textColor.getText().trim();
                    int modelYear = Integer.parseInt(textModelYear.getText().trim());
                    int driverID = Integer.parseInt(textDriverID.getText().trim()); // Gets the user input for the driver ID
                    Car car = getCar(carID); // Creates Car object to use getCar method to get the CarID
                    if(car.getCarID() != -1) { // Checks if the car carID already exist
                        updateCar(carID, make, model, color, modelYear, driverID); // Update car method is ran and updates the car information
                        refreshCarsTable(); // Updates the car table with new informaiton
                        clearCarTextFields(); // Resets and clears the text entry fields
                        message.setText("An existing car was updated successfully!"); // Message updater
                    }
                    else
                    {   // If car does not exist already, cannot be updated and givse alert message
                        alert("Car does not exist", "Update error"); // Update error message
                    }
                }
                else
                {   // If textCarID field is still empty, alert message is given
                    alert("Car ID cannot be empty", "Update error"); // Update error message
                }
            }
            else {
                alert("Invalid input(s), Could not update car", "Update error");
            }
        }
        else{
            alert("DriverID and other fields cannot be empty", "Update error"); // alert message is given
        }
    }//GEN-LAST:event_updateCarActionPerformed

    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        FileNameExtensionFilter extension = new FileNameExtensionFilter(".Images", ".jpg", ".png", ".jpeg");
        chooser.addChoosableFileFilter(extension);
        int fileState = chooser.showSaveDialog(null);
        if (fileState == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            filename = file.getAbsolutePath();
            ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(image.getWidth(), image.getHeight(), Image.SCALE_SMOOTH));
            image.setIcon(imageIcon);
   
            try {
                File image = new File(filename);
                FileInputStream fis = new FileInputStream(image);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for(int readNum; (readNum = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, readNum);
                }
                driverImage = bos.toByteArray();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else {
            image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pika.png")));
        }
    }//GEN-LAST:event_imageButtonActionPerformed

    private void clearDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDriverActionPerformed
        clearDriverTextFields();
    }//GEN-LAST:event_clearDriverActionPerformed

    private void infoCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoCardButtonActionPerformed
        infoCardFrame.setVisible(true);
    }//GEN-LAST:event_infoCardButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        infoCardFrame.dispatchEvent(new WindowEvent(infoCardFrame, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitButtonActionPerformed

    private void exitDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitDriverButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitDriverButtonActionPerformed

    private void clearCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCarActionPerformed
        clearCarTextFields();
    }//GEN-LAST:event_clearCarActionPerformed

    private boolean carCheck(int driver) {
        List<Car> cars = carDAO.getAll();
        for(Car car: cars) {
            int driverID = car.getDriverID();
            if (driver == driverID) {
                return false;
            }
        }
        return true;
    }
    
    
    public static java.sql.Date convertUtilDateToSqlDate(java.util.Date date){
        if(date != null){ 
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            return sqlDate;
        }
        return null;
    }
    
    static void addDriver(int driverID, String firstName, String lastName, String dob, int age, int driverRank, int driftPoints, String country, String team, byte[] image) { // Method adds driver into driver table
    Driver driver; // Creates driver object
    driver = new Driver(driverID, firstName, lastName, dob, age, driverRank, driftPoints, country, team, image); // Creates driver instance
    driverDAO.insert(driver); // Runs insert method from DriverDAO
    }

    
    //method to clear the text fields
    private void clearDriverTextFields() {
        textID.setText("");
        textFirstName.setText("");
        textLastName.setText("");
        dobChooser.setDate(null);
        textRank.setText("");
        textPoints.setText("");
        comboCountry.setSelectedIndex(0);
        textTeam.setText("");
        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pika.png")));
        cardAge.setText("Age: ");
        cardDOB.setText("Date of Birth: 0000-00-00");
        cardName.setText("Name: ");
        cardRank.setText("Rank: ");
        cardPoints.setText("Points: ");
        cardTeam.setText("Team: ");
        country.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pika.png")));
    }

    //fetch 
    private void refreshDriversTable() throws ParseException {
        List<Driver> drivers = driverDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) driverTable.getModel();
        //Clear all items in driverTable
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Driver driver : drivers) {
                Object[] row = new Object[10];
                row[0] = driver.getDriverID();
                row[1] = driver.getFirstName();
                row[2] = driver.getLastName();
                row[3] = driver.getDob();
                row[4] = driver.getAge();
                row[5] = driver.getDriverRank();
                row[6] = driver.getDriftPoints();
                row[7] = driver.getCountry();
                row[8] = driver.getTeam();
                row[9] = driver.getImage();
                model.addRow(row);
        }
    }
    
    static Driver getDriver(int driverID) { // Method gets driver from driver table
        Optional<Driver> driver = driverDAO.get(driverID); // Creates driver instance 
        return driver.orElseGet(() -> new Driver(-1, "Non-exist", "Non-exist", "Non-exist", -1, -1, -1, "Non-exist", "Non-exist", null)); // Returns default values if not in driver table
    }
    
    
    static void updateDriver(int driverID, String firstName, String lastName, String dob, int age, int driverRank, int driftPoints, String country, String team, byte[] image) { // Method updates driver in driver table 
        Driver driver; // Creates driver object 
        driver = new Driver(driverID, firstName, lastName, dob, age, driverRank, driftPoints, country, team, image); // Creates driver instance 
        driverDAO.update(driver); // Runs update method from DriverDAO
    }
    
    static void deleteDriver(int driverID) { // Method deletes driver from driver table 
            Driver driver; // Creates driver object 
            driver = getDriver(driverID); // Runs getDriver method 
            driverDAO.delete(driver); // Runs delete method from DriverDAO
    }
    
        
    //method to clear the text fields
    private void clearCarTextFields() {
        textCarID.setText("");
        textMake.setText("");
        textModel.setText("");
        textColor.setText("");
        textModelYear.setText("");
        textDriverID.setText("");
    }
    
    //fetch 
    private void refreshCarsTable() {
        List<Car> cars = carDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) carTable.getModel();
        //Clear all items in driverTable
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Car car : cars) {
                Object[] row = new Object[6];
                row[0] = car.getCarID();
                row[1] = car.getMake();
                row[2] = car.getModel();
                row[3] = car.getColor();
                row[4] = car.getModelYear();
                row[5] = car.getDriverID();
                model.addRow(row);
        }
    }
    
    static void addCar(int carID, String make, String model, String color, int modelYear, int driverID) { // Method adds car into car table
        Car car; // Creates car object
        car = new Car(carID, make, model, color, modelYear, driverID); // Creates car instance 
        carDAO.insert(car); // Runs insert method from CarDAO
    }
    
    static Car getCar(int carID) { // Method gets carID from car table
        Optional<Car> car = carDAO.get(carID); // Creates car instance
        return car.orElseGet(() -> new Car(-1, "Non-exist", "Non-exist", "Non-exist", -1, -1)); // Returns default values if not in car table
    }

    static void updateCar(int carID, String make, String model, String color, int modelYear, int driverID) { // Method updates car in car table
        Car car; // Creates car object
        car = new Car(carID, make, model, color, modelYear, driverID); // Creates car instance
        carDAO.update(car); // Runs update method from CarDAO
    }
    
    static void deleteCar(int carID) { // Method deletes car from car table 
        Car car; // Creates car object
        car = getCar(carID); // Runs getCar method 
        carDAO.delete(car); // Runs delete method from CarDAO
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        driverDAO = new DriverDAO(); // New driver instance created 
        carDAO = new CarDAO(); // New car instance created 
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCar;
    private javax.swing.JButton addDriver;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton carButton;
    private javax.swing.JLabel carColorLabel;
    private javax.swing.JFrame carFrame;
    private javax.swing.JLabel carIDLabel;
    private javax.swing.JLabel carMakeLabel;
    private javax.swing.JLabel carModelLabel;
    private javax.swing.JLabel carModelYearLabel;
    private javax.swing.JTable carTable;
    private javax.swing.JLabel cardAge;
    private javax.swing.JLabel cardDOB;
    private javax.swing.JLabel cardHeader;
    private javax.swing.JLabel cardName;
    private javax.swing.JLabel cardPoints;
    private javax.swing.JLabel cardRank;
    private javax.swing.JLabel cardTeam;
    private javax.swing.JButton clearCar;
    private javax.swing.JButton clearDriver;
    private javax.swing.JComboBox<String> comboCountry;
    private javax.swing.JLabel country;
    private javax.swing.JLabel countryLabel;
    private com.toedter.calendar.JDateChooser dobChooser;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JRadioButton driverButton;
    private javax.swing.JLabel driverIDCLabel;
    private javax.swing.JLabel driverIDLabel;
    private javax.swing.JTable driverTable;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitDriverButton;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel header;
    private javax.swing.JLabel image;
    private javax.swing.JButton imageButton;
    private javax.swing.JButton infoCardButton;
    private javax.swing.JFrame infoCardFrame;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel message;
    private javax.swing.JLabel pointsLabel;
    private javax.swing.JLabel rankLabel;
    private javax.swing.JButton removeCar;
    private javax.swing.JButton removeDriver;
    private javax.swing.JLabel status;
    private javax.swing.JLabel tableHeader;
    private javax.swing.JLabel teamLabel;
    private javax.swing.JTextField textCarID;
    private javax.swing.JTextField textColor;
    private javax.swing.JTextField textDriverID;
    private javax.swing.JTextField textFirstName;
    private javax.swing.JTextField textID;
    private javax.swing.JTextField textLastName;
    private javax.swing.JTextField textMake;
    private javax.swing.JTextField textModel;
    private javax.swing.JTextField textModelYear;
    private javax.swing.JTextField textPoints;
    private javax.swing.JTextField textRank;
    private javax.swing.JTextField textTeam;
    private javax.swing.JButton updateCar;
    private javax.swing.JButton updateDriver;
    // End of variables declaration//GEN-END:variables
}
